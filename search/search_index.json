{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to Pivot Atlas, an educational pivoting handbook for cyber threat intelligence analysts developed by Amitai Cohen.</p> <p>This website contains simple reference material for how to make the best use of various threat activity observables, such as IP addresses and file hashes. The goal is to map the pivotability of every type of artifact that analysts might encounter in the course of their investigations:</p> <p> \"While investigating threat activity, I found           domain,IP address,sample,file hash,certificate,user agent      ...what can I do with it?\" </p> <p> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2014 You, possibly. </p> <p>For any given observable, analysts can use this handbook to figure out what steps they should take to reveal potentially related malicious infrastructure or tooling. Every listed pivoting method can be performed using one or more tools (depending on preference or which platforms you have access to), and query examples are provided for the most commonly used tools.</p> <p>Mermaid diagrams are also included for easy and clickable navigation between artifact types, as in the following example or in the full map (the diagram may take a few seconds to load in your browser if you're visiting this website for the first time):</p> <ul> <li> Pivot Map <pre><code>flowchart LR\n    classDef primary stroke-width: 2px\n    classDef secondary stroke-dasharray: 5 5\n\n    %% define nodes\n    IP_ADDRESS(IP Address)\n    DOMAIN(Domain):::primary\n    DOMAIN_(Domain):::secondary\n    TLS_CERT(TLS Certificate)\n    SAMPLE(Sample)\n\n    %% define edges\n    DOMAIN -- forward DNS --&gt; IP_ADDRESS\n    IP_ADDRESS -- reverse DNS ---&gt; DOMAIN\n    DOMAIN &lt;-- DNS history --&gt; IP_ADDRESS\n    TLS_CERT -- CN ---&gt; DOMAIN\n    DOMAIN &lt;-- similar name ---&gt; DOMAIN_\n    DOMAIN &lt;-- registrant ---&gt; DOMAIN_\n    DOMAIN &lt;-- registrar --&gt; DOMAIN_\n    DOMAIN &lt;-- NS --&gt; DOMAIN_\n    DOMAIN &lt;-- TLD --&gt; DOMAIN_\n    DOMAIN &lt;-- reg. time --&gt; DOMAIN_\n    DOMAIN &lt;-- URL path --&gt; DOMAIN_\n    SAMPLE -- references ---&gt; DOMAIN\n    SAMPLE -- queries --&gt; DOMAIN\n\n    %% define links\n    click TLS_CERT \"/artifacts/tls-certificate\"\n    click IP_ADDRESS \"/artifacts/ip-address\"\n    click DOMAIN \"/artifacts/domain\"\n    click SAMPLE \"/artifacts/sample\"\n</code></pre></li> </ul> <p>This project is a work in progress, but in time it might serve as a comprehensive guide to pivoting. If you would like to learn more about pivoting and cyber threat intelligence, please check out the references listed above. If you would like to contribute content to this project or provide feedback, please feel free to reach out on Twitter or submit an issue or pull request here.</p>"},{"location":"#frequently-asked-questions-faq","title":"Frequently asked questions (FAQ)","text":""},{"location":"#how-should-i-use-pivot-atlas","title":"How should I use Pivot Atlas?","text":"<ul> <li>To learn how to pivot from any given artifact, check out the Artifacts section.</li> <li>To learn about various artifact identifier, take a look at the Fingerprints page.</li> <li>To learn about threat intel analysts' tools of the trade, head on over to the Tools page.</li> <li>To learn how to operationalize threat intel products and make them as impactful as possible, check out the Impact page.</li> <li>For guidance on making the most of the pivoting process, check out the Tips page.</li> </ul>"},{"location":"#whats-the-best-way-to-contribute-to-this-project","title":"What's the best way to contribute to this project?","text":"<p>You are welcome to submit information about publicly known examples of investigations demonstrating novel or creative pivots (or anything else you've noticed may be missing from this website). You can also review the \"Future plans\" section of this blogpost for ideas on areas that require expansion or improvement. To contribute, you can either submit a pull request yourself or simply add an issue to the GitHub project (pull requests are preferred but issues are welcome).</p>"},{"location":"#where-can-i-learn-more-about-pivoting","title":"Where can I learn more about pivoting?","text":"<p>If you'd like to learn more about pivoting in cyber threat intelligence, be sure to check out the following resources:</p> <ul> <li>Formulating a Robust Pivoting Methodology by Joe Slowik</li> <li>Pivoting from Art to Science by Joe Slowik</li> <li>A Cyber Threat Intelligence Self-Study Plan by Katie Nickels</li> <li>A Beginner\u2019s Guide to Tracking Malware Infrastructure by Embee Research</li> <li>Visual Threat Intelligence by Thomas Roccia</li> </ul>"},{"location":"#where-can-i-learn-more-about-offensive-cyber-operations","title":"Where can I learn more about offensive cyber operations?","text":"<p>If you'd like to learn more about how threat actors operate, the following books are an excellent place to start:</p> <ul> <li>Network Attacks and Exploitation: A Framework by Matthew Monte</li> <li>Attribution of Advanced Persistent Threats by Timo Steffens</li> </ul>"},{"location":"#related-projects","title":"Related projects","text":"<ul> <li>Invisible Strings \u2013 Contemporary Challenges And Techniques Of Infrastructure Tracking by Kamil Bojarski (see also spreadsheet and blogpost)</li> <li>Pivot Mappings Spreadsheet by Yashraj Solanki (based on Pivot Atlas)</li> <li>Unveiling shadows: key tactics for tracking cyber threat actors, attribution, and infrastructure analysis by Hossein Jazi</li> </ul>"},{"location":"artifacts/","title":"Artifacts","text":"<p>This section contains information about various types of artifacts encountered during threat intelligence investigations, such as malware samples and domains. Within this section, you can find explanations about each artifact type and how they relate to malicious cyber activity, as well as real-world examples of artifacts surfaced in the course of historic investigations.</p> <p>Additionally, every page contains a pivot map showing various paths analysts can take in order to pivot between different artifact types, explanations of these pivots and accompanying examples, as well as placeholder queries for performing certain pivots via popular tools.</p> <p>Looking forward, as both threat intel tradecraft and new pivoting tools are developed, novel and creative pivots are expected to be added to this corpus. Moreover, there are almost certainly past investigations that involved pivots that have yet to be incorporated here, and these will also be added as this backlog is addressed.</p> <p>Placeholder queries</p> <p>Some pivot descriptions throughout this section contain a \"Try it out\" callout \u2014 you can click these to view the syntax of URLs and API calls for various tools that enable the relevant pivot. These contain placeholders for the artifact or observable in question (in the form of <code>{IP_ADDRESS}</code>, <code>{PATH}</code>, etc.) \u2014 simply copy the text and replace the placeholder with the relevant string prior to using the command.</p> <p>Defanging</p> <p>Throughout this section, square brackets are added before and after dots in malicious domains and IP addresses (for example, <code>evil[.]com</code> and <code>6.6.6[.]6</code>) \u2014 this is a common practice known as \"defanging\", which is meant to prevent someone from accidentally clicking autogenerated hyperlinks and connecting to the malicious server.</p>"},{"location":"artifacts/#organizing-principles","title":"Organizing principles","text":"<p>In graph terminology, I've chosen to use nodes to represent artifacts \u2014 things that exist in reality (i.e., cyberspace) \u2014 whereas pivots are represented as egdes between nodes:</p> <pre><code>flowchart LR\n    ARTIFACT(\"Artifact (node)\") -- Pivot (edge) ---&gt; ARTIFACT_(\"Artifact (node)\")\n</code></pre> <p>Similarly, fingerprints (such as JARM) are also represented as edges, since they can be considered higher-order abstractions of artifacts (whether lossy or lossless), rather than artifacts in and of themselves. Having said that, certain pivots and fingerprints may eventually \"graduate\" to artifact status if they are proven to have enough substance.</p> <p>Every page in this section focuses on a particular artifact type, which is represented using a thick border, while other instances of the same artifact type are represented using a dashed border:</p> <pre><code>flowchart LR\n    classDef primary stroke-width: 2px\n    classDef secondary stroke-dasharray: 5 5\n    ARTIFACT(\"Artifact\"):::primary -- Pivot ---&gt; ARTIFACT_(\"Artifact of same type\"):::secondary\n    ARTIFACT -- Pivot ---&gt; ARTIFACT__(\"Artifact of different type\")\n</code></pre> <p>Artifacts such as IP addresses can also contain \"virtual\" sub-artifacts such as servers or clients, which are represented using a dotted line leading to a node with rounded edges:</p> <pre><code>flowchart LR\n    ARTIFACT(\"Artifact\") -. Pivot ..-&gt; SUB_ARTIFACT_([\"Sub-artifact\"])\n</code></pre>"},{"location":"artifacts/domain/","title":"Domain","text":""},{"location":"artifacts/domain/#overview","title":"Overview","text":"<ul> <li> <p> Definition</p> <p> A fully qualified domain name (FQDN) is the technical term for what are typically called domains (e.g., <code>google.com</code>) and subdomains (e.g., <code>drive.google.com</code>). </p> </li> <li> <p> Usecase</p> <p> Threat actors acquire FQDNs and configure them to resolve to servers they control. This allows them to direct phishing victims to FQDNs which resolve to malicious landing pages, and allow malware-infected devices to send an initial DNS resolution request for FQDNs associated with C&amp;C servers. </p> </li> </ul> <ul> <li> <p> Example</p> <p> <code>realbumblebee[.]net</code>, <code>recentbee[.]net</code>, and <code>currentbee[.]net</code> were domains that resolved to Cobalt Strike C&amp;C servers operated by the threat actor known as Black Basta.<sup>1</sup> </p> </li> </ul> <ul> <li> Pivot Map <pre><code>flowchart LR\n    classDef primary stroke-width: 2px\n    classDef secondary stroke-dasharray: 5 5\n\n    %% define nodes\n    IP_ADDRESS(IP Address)\n    DOMAIN(Domain):::primary\n    DOMAIN_(Domain):::secondary\n    TLS_CERT(TLS Certificate)\n    SAMPLE(Sample)\n\n    %% define edges\n    DOMAIN -- forward DNS --&gt; IP_ADDRESS\n    IP_ADDRESS -- reverse DNS ---&gt; DOMAIN\n    DOMAIN &lt;-- DNS history --&gt; IP_ADDRESS\n    TLS_CERT -- CN ---&gt; DOMAIN\n    DOMAIN &lt;-- similar name ---&gt; DOMAIN_\n    DOMAIN &lt;-- registrant ---&gt; DOMAIN_\n    DOMAIN &lt;-- registrar --&gt; DOMAIN_\n    DOMAIN &lt;-- NS --&gt; DOMAIN_\n    DOMAIN &lt;-- TLD --&gt; DOMAIN_\n    DOMAIN &lt;-- reg. time --&gt; DOMAIN_\n    DOMAIN &lt;-- URL path --&gt; DOMAIN_\n    SAMPLE -- references ---&gt; DOMAIN\n    SAMPLE -- queries --&gt; DOMAIN\n\n    %% define links\n    click IP_ADDRESS \"#ip-addresses\"\n    click DOMAIN_ \"#domains\"\n    click SAMPLE \"#samples\"\n    click TLS_CERT \"#tls-certificates\"\n</code></pre></li> </ul> <p>Actor-controlled subdomains of shared domains</p> <p>Some domains resolve to platforms owned by legitimate entities, but threat actors abuse them by registering subdomains (usually for free) which they use for maliicous purposes. For example, <code>oast.pro</code> is a legitimate domain operated by Project Discovery for use with a pentesting tool they maintain called Interactsh. However, malicious actors might register subdomains of <code>oast.pro</code> (e.g., <code>c59e3crp82ke7bcnedq0cfjqdpeyyyyyn.oast.pro</code>). In this case, only the subdomain would be uniquely associated with specific malicious activity, whereas the domain would not.</p>"},{"location":"artifacts/domain/#pivots","title":"Pivots","text":""},{"location":"artifacts/domain/#domains","title":"Domains","text":""},{"location":"artifacts/domain/#domains-with-similar-names","title":"Domains with similar names","text":"<p>Threat actors may register multiple domains with a similar naming scheme, which can be levereged by analysts to discover additional potentially related domains by querying DNS databases or using tools like dnstwist to find permutations of any given domain name. Additionally, threat actors may use names similar to their target organizations' domain names, which can be a useful indicator of malicious intent when reviewing potentially related domains.</p> <p>Example</p> <p>Black Basta registered various bee-themed domains which resolved to C&amp;C servers. These included <code>realbumblebee[.]net</code>, <code>recentbee[.]net</code>, and <code>currentbee[.]net</code>.<sup>1</sup></p>"},{"location":"artifacts/domain/#domains-with-same-tld","title":"Domains with same TLD","text":"<p>Threat actors may have a preference for certain top-level domains (TLD), such as <code>.xyz</code>, which is usually very cheap or even free (for this reason, some organizations block this TLD as a precautionary measure). In such cases, applying a TLD filter alongside filters for other parameters (such as registrar) can narrow domain search results within DNS databases to a number reasonably small enough to manually review.</p>"},{"location":"artifacts/domain/#domains-with-same-registrar","title":"Domains with same registrar","text":"<p>A domain name registrar handles registrations of domains and leases them to customers. Some threat actors may show preference for certain registrars when registering their domains for malicious use (possible reasons may include minimal anti-fruad mechanisms in place or acceptance of cryptocurrency as payment). This preference can then be leveraged by analysts for pivoting purposes by querying WHOIS databases.</p>"},{"location":"artifacts/domain/#domains-with-similar-registrant-details","title":"Domains with similar registrant details","text":"<p>Domains registered by the same threat actor might have overlapping registration details, which can be retrieved through a reverse WHOIS query or by querying WHOIS databases. In some cases the details might be exactly the same, while in others there might be commonalities in certain registration fields that match the same regular expressions. In some cases these fields might contain genuine information that could prove useful for other investigative purposes (including attribution), such as an email address or physical location associated with the threat actor. However, these details are often anonymized by privacy protection, particularly if the threat actor has strict operational security.</p> <ul> <li> <p> Features</p> <p> The registrant details of <code>gopivoting.org</code> are protected and therefore not very pivotable:  <pre><code>Registrant Contact Information:\n    Name:               REDACTED FOR PRIVACY\n    Organization:       Domains By Proxy, LLC\n    Address:            REDACTED FOR PRIVACY\n    Address:            REDACTED FOR PRIVACY\n    City:               REDACTED FOR PRIVACY\n    State / Province:   Arizona\n    Postal Code:        REDACTED FOR PRIVACY\n    Country:            US\n    Phone:              REDACTED FOR PRIVACY\n    Email:              Please query the WHOIS server\n                        of the owning registrar identified\n                        in this output for information on\n                        how to contact the Registrant, Admin,\n                        or Tech contact of the queried domain name.\n</code></pre></p> </li> </ul>"},{"location":"artifacts/domain/#domains-registered-in-same-timeframe","title":"Domains registered in same timeframe","text":"<p>Threat actors perform registration in bulk of domains meant for malicious purposes, or at the very least they may register domains around the same time if they're to be used for the same campaign. In such cases, these timeframes can be leveraged by analysts as an effective filter to narrow down the number of results for otherwise noisy registration detail queries within WHOIS databases. Furthermore, if an analyst is lucky, the threat actor may have registered other artifacts during the same timeframe as well, such as IP addresses and TLS certificates.</p>"},{"location":"artifacts/domain/#domain-with-same-url-path","title":"Domain with same URL path","text":"<p>Threat actors may set up various API endpoints on their servers to facilitate the required functionality for their malicious infrastructure. Each of these endpoints may be available on a different URL path (e.g., malware may connect to an <code>/upload/</code> endpoint to exfiltrate data). Similarly, threat actors may hijack legitimate servers and deploy a file containing malicious code, which may be located on a consistent URL path across multiple compromised servers.</p> <p>Given a domain resolving to an attacker-controlled server, analysts can query for any of its known URL paths in the databases of URL scanning services such as URLScan. This can surface other domains with the same paths which might resolve to potentially related servers.</p> Try it out URLScan (URL)URLScan (API) <pre><code>https://urlscan.io/search/#page.url%3A%22{PATH}%22\n</code></pre> <pre><code>TO DO\n</code></pre>"},{"location":"artifacts/domain/#tls-certificates","title":"TLS Certificates","text":""},{"location":"artifacts/domain/#certificates-listing-it-as-common-name-cn","title":"Certificates listing it as common name (CN)","text":"<p>TLS certificates contain a common name field (CN) indicating which domain or subdomains the certificate applies to. Therefore, pivoting on a domain by querying certificate databases can lead to certificates listing the domain itself or its subdomains in its common name field (CN). The resulting certificates might reveal new information listed in their other various fields, and further pivoting on the certificates' hashes might lead to other IP addresses that have previously resolved the same domain.</p> <p>Example</p> <p>Embee Research analyzed certificate data related to a domain associated with MatanBuchus in order to surface additional domains using certificates with the same subdomains, certificate authority, and registration period.<sup>2</sup></p>"},{"location":"artifacts/domain/#ip-addresses","title":"IP Addresses","text":""},{"location":"artifacts/domain/#ip-address-to-which-it-resolves","title":"IP address to which it resolves","text":"<p>A domain operated by a threat actor can resolve to an IP address hosting one or more servers. Note that the same IP address might be used for multiple purposes at once (e.g., malware C2, serving phishing pages, proxying traffic, etc.), with every server fronted by a different domain or subdomain.</p> <p>While querying a domain for its resolving IP address is called forward DNS (fDNS for short), the opposite query is known as reverse DNS (or rDNS). Analysts can perform such lookups using DNS tools such as DNSChecker.</p>"},{"location":"artifacts/domain/#ip-addresses-to-which-it-previously-resolved","title":"IP addresses to which it previously resolved","text":"<p>Pivoting to past DNS records is especially useful when investigating a long-term campaign or cases in which a threat actor has already shut down their operations.</p> <p>Historic DNS resolutions can be based on either passive DNS collection (pDNS), which involves continuously recording DNS queries from various sources and aggregating their results into a queryable database, or active forward DNS collection (fDNS), which involves regularly querying for known domains and storing their resolutions.</p> <p>Example</p> <p>Embee Research analyzed passive DNS data related to several domains associated with ACTINIUM in order to surface additional IP addresses to which they previously resolved.<sup>3</sup></p> Try it out Validin (URL) <pre><code>https://app.validin.com/detail?type=dom&amp;find={DOMAIN}#tab=resolutions\n</code></pre>"},{"location":"artifacts/domain/#samples","title":"Samples","text":""},{"location":"artifacts/domain/#samples-that-reference-or-query-it","title":"Samples that reference or query it","text":"<p>Threat actors often configure their malware to communicate with one or more C&amp;C servers, and this usually involves listing a domain within the malware's code (in such instances, the domain is said to be \"hardcoded\" in the malware). When executed (on an infected device, honeypot, or in a sandboxed environment), the malware will send a DNS request to resolve the domain, and then communicate with the server hosted on the resolving IP address. By running a static analysis of a sample (even through something as simple as using <code>strings</code>), one can reveal any such hardcoded domains it may contain.</p> <p>However, some threat actors may obfuscate hardcoded domains as an anti-analysis technique, in which case one must use dynamic analysis to record the malware's DNS requests, or reverse engineer the sample to overcome the obfuscation.</p> <p>Regardless, given a domain, analysts can use \"malware zoo\" platforms such as VirusTotal to query for any such previously encountered samples.</p> <ol> <li> <p>#StopRansomware: Black Basta \u21a9\u21a9</p> </li> <li> <p>Identifying MatanBuchus Domains Through Hardcoded Certificate Values \u21a9</p> </li> <li> <p>Passive DNS Pivoting - Uncovering APT Infrastructure Through Historical Records and Subdomain Analysis \u21a9</p> </li> </ol>"},{"location":"artifacts/ip-address/","title":"IP Address","text":""},{"location":"artifacts/ip-address/#overview","title":"Overview","text":"<ul> <li> <p> Definition</p> <p> An Internet Protocol address is a numerical label assigned to a device connected to a computer network, which can function as either a client, a server, or both. </p> </li> <li> <p> Usecase</p> <p> Threat actors purchase or hijack IP addresses and assign them to clients or servers, which they deploy to host various parts of their infrastructure, such as phishing websites, crawlers, malware storage, C&amp;C, exfiltrated data storage, and proxies for routing malicious traffic. Similarly, infected clients also have IP addresses. </p> </li> </ul> <ul> <li> <p> Example</p> <p> <code>134.209.127[.]249</code> was in use by an unknown threat actor for the triple purpose of hosting servers for running commands against cloud environments, sending phishing SMS messages to targets, and hosting phishing websites.<sup>1</sup> </p> </li> </ul> <ul> <li> Pivot Map <pre><code>flowchart LR\n    classDef primary stroke-width: 2px\n    classDef secondary stroke-dasharray: 5 5\n\n    %% define nodes\n    IP_ADDRESS(IP Address):::primary\n    IP_ADDRESS_(IP Address):::secondary\n    DOMAIN(Domain)\n    SERVER([Server / Client])\n    SERVER_([Server]):::secondary\n    SAMPLE(Sample)\n    USER_AGENT(User Agent)\n    TLS_CERT(TLS Certificate)\n\n    %% define edges\n    SERVER -- identifies as ---&gt; USER_AGENT\n    IP_ADDRESS &lt;-- ASN --&gt; IP_ADDRESS_\n    IP_ADDRESS &lt;-- traffic --&gt; IP_ADDRESS_\n    IP_ADDRESS &lt;-- WHOIS details ---&gt; IP_ADDRESS_\n    IP_ADDRESS &lt;-- WHOIS history ---&gt; IP_ADDRESS_\n    IP_ADDRESS &lt;-- ports --&gt; IP_ADDRESS_\n    IP_ADDRESS -. hosts ..-&gt; SERVER\n    TLS_CERT -- served by ---&gt; SERVER\n    SERVER &lt;-- fingerprint ---&gt; SERVER_\n    SERVER &lt;-- banner ---&gt; SERVER_\n    SERVER &lt;-- favicon ---&gt; SERVER_\n    SERVER &lt;-- content ---&gt; SERVER_\n    SERVER &lt;-- URL path ---&gt; SERVER_\n    SERVER -- stores ---&gt; SAMPLE\n    SAMPLE -- connects --&gt; SERVER\n    SAMPLE -- references --&gt; IP_ADDRESS\n    DOMAIN -- forward DNS --&gt; IP_ADDRESS\n    DOMAIN &lt;-- DNS history --&gt; IP_ADDRESS\n    IP_ADDRESS -- reverse DNS ---&gt; DOMAIN\n\n    %% define links\n    click IP_ADDRESS_ \"#ip-addresses\"\n    click DOMAIN \"#domains\"\n    click SERVER \"#servers\"\n    click SAMPLE \"#samples\"\n    click USER_AGENT \"#user-agents\"\n    click TLS_CERT \"#tls-certificates\"\n</code></pre></li> </ul> <p>Static vs. dynamic addresses</p> <p>IP addresses can be either static or dynamic, with the first type remaining under the control of the same user for prolonged periods of time, and the second type often changing hands. Therefore, dynamic IP addresses are much less useful for pivoting than their static counterparts, since any pivots could lead to entirely unrelated activity, depending on the timeframe of our query.</p> <p>Clients vs. servers</p> <p>IP addresses can be assigned by threat actors to either clients or servers, which affects how they appear in logs and therefore how one should pivot on them. For example, clients can be observed scanning victims' networks or connecting to compromised target machines, whereas servers are applications that recieve connections from compromised devices or attacker-controlled clients.</p> <p>In some cases, the same IP address can operate as both as server and a client. For example, threat actors may use the same IP address for both crawling and C&amp;C. Similarly, threat actors may establish networks of ORBs composed of compromised devices - these would function as proxies, connecting both to and from other devices.</p>"},{"location":"artifacts/ip-address/#pivots","title":"Pivots","text":""},{"location":"artifacts/ip-address/#domains","title":"Domains","text":""},{"location":"artifacts/ip-address/#domains-resolving-to-it","title":"Domains resolving to it","text":"<p>An IP address might be resolved by one or more domains or subdomains operated by the same threat actor. In some cases, an IP address might be used for multiple purposes at once (e.g., malware C2, serving phishing pages, proxying traffic, etc.), with every server fronted by a different domain or subdomain.</p> <p>Since most normal network traffic initiates in DNS queries and uses host headers for communicating between clients and servers, actors often configure their malware to communicate with domains rather than directly connecting to an IP address. This affords their activity a measure of stealth, with the added benefit of greater operational flexibility.</p> <p>While querying a domain for its resolving IP address is called forward DNS (fDNS for short), the opposite query is known as reverse DNS (or rDNS).</p> Try it out DNSChecker (URL) - rDNSDriftnet (API) - rDNS <pre><code>https://dnschecker.org/reverse-dns.php?query={IP_ADDRESS}\n</code></pre> <pre><code>$ curl -s -H 'Authorization: Bearer {API_TOKEN}' \\\n'https://api.driftnet.io/v1/domain/rdns?ip={IP_ADDRESS}' \\\n| jq . \\\n| less -S\n</code></pre>"},{"location":"artifacts/ip-address/#domains-that-previously-resolved-to-it","title":"Domains that previously resolved to it","text":"<p>Pivoting to past DNS records is especially useful when investigating a long-term campaign or cases in which a threat actor has already shut down their operations.</p> <p>Historic DNS resolutions can be based on either passive DNS collection (pDNS), which involves continuously recording DNS queries from various sources and aggregating their results into a queryable database, or active forward DNS collection (fDNS), which involves regularly querying for known domains and storing their resolutions.</p> Try it out Validin (URL) <pre><code>https://app.validin.com/detail?type=ip&amp;find={IP_ADDRESS}#tab=resolutions\n</code></pre>"},{"location":"artifacts/ip-address/#ip-addresses","title":"IP Addresses","text":""},{"location":"artifacts/ip-address/#addresses-in-same-asn","title":"Addresses in same ASN","text":"<p>Some Autonomous System Numbers (ASN) are known to be operated by malicious actors<sup>2</sup>, and in some cases an address's ASN may contain additional addresses in use by the same actor.</p> <p>Given an ASN, analysts can use DNS tools such as MXToolBox to identify the IP ranges associated with it.</p>"},{"location":"artifacts/ip-address/#addresses-with-similar-registration-details","title":"Addresses with similar registration details","text":"<p>When actors purchase an IP address, they must supply registrant information, which is made publicly available through the WHOIS protocol. Unlike domain registration, leasing an IP address does not allow for registrant privacy; the registrant must supply their personal or business details. While stealthy actors will often provide fake registration details, these can sometimes still be useful for pivoting if they are rare enough and the actor uses the same details more than once. Note that if a threat actor leases a (static or dynamic) IP address from a cloud provider, a WHOIS query will only return information about the provider.</p> <ul> <li> <p> Features</p> <p> Some of the registrant details of <code>140.82.112.3</code>, which resolves <code>github.com</code> as of 17/06/24:  <pre><code>OrgName:        GitHub, Inc.\nOrgId:          GITHU\nAddress:        88 Colin P Kelly Jr Street\nCity:           San Francisco\nStateProv:      CA\nPostalCode:     94107\nCountry:        US\nRegDate:        2012-10-22\nUpdated:        2021-05-20\nOrgNOCHandle:   GITHU-ARIN\nOrgNOCPhone:    +1-415-735-4488\nOrgNOCEmail:    hostmaster@github.com\nOrgNOCRef:      https://rdap.arin.net/registry/entity/GITHU-ARIN\n</code></pre></p> </li> </ul>"},{"location":"artifacts/ip-address/#addresses-with-historically-similar-registrant-details","title":"Addresses with historically similar registrant details","text":"<p>As mentioned above, threat actors may lease different IP addresses at different times but reuse certain registration details (which might be real or fake). By reviewing WHOIS history platforms, analysts can reveal past similarities which may no longer exist in the current record.</p>"},{"location":"artifacts/ip-address/#addresses-with-same-open-ports","title":"Addresses with same open ports","text":"<p>If an IP address hosting a C&amp;C server has a relatively unique set of open ports (e.g., <code>80</code>, <code>443</code>, <code>5432</code>, and <code>6379</code>), analysts can leverage this to query host scanning services such as Shodan and Censys for other IP addresses with the exact same set of open ports, some of which might be hosting servers operated by the same threat actor or running the same malicious applications.</p> <p>Example</p> <p>Cobalt Strike team server is configured to listen on port 50050 by default, and threat actors don't always bother to change the default configuration prior to deployment.<sup>4</sup></p>"},{"location":"artifacts/ip-address/#clients","title":"Clients","text":""},{"location":"artifacts/ip-address/#clients-connecting-to-it","title":"Clients connecting to it","text":"<p>If you have access to traffic aggregation data, you can check for other IP addresses that may have been observed in communication with this IP address. This can reveal victim devices communicating with malicious infrastructure, or other components of a threat actor's operation (such as proxy servers).</p> <p>Example</p> <p>Proofpoint and Team Cymru analyzed Netflow data to surface a common server observed in communication with multiple C2 servers used by Latrodectus malware operators.<sup>3</sup></p>"},{"location":"artifacts/ip-address/#clients-connecting-from-it","title":"Clients connecting from it","text":"<p>Besides their use for hosting traditional servers, threat actors can also use IP addresses to connect as clients to victim infrastructure. Threat actors can do so using IP addresses they own or via proxy or VPN servers. Client behavior (whether automated or \"hands-on-keyboard\") can be observed during brute-force attacks, password spray attacks, as well as remote connection sessions such as logging into a target database.</p>"},{"location":"artifacts/ip-address/#clients-with-same-fingerprint","title":"Clients with same fingerprint","text":"<p>Infected or attacker-controlled clients running the same tools often have overlapping techstacks (meaning that they run the same set of software components). Moreover, these clients might be configured in the exact same way. This can result in a subset of such clients that can be uniquely identified by their fingerprint (or a set of fingerprint types), such as one of the JA4+ fingerprints.</p>"},{"location":"artifacts/ip-address/#user-agents","title":"User Agents","text":""},{"location":"artifacts/ip-address/#user-agents-identifying-it","title":"User agents identifying it","text":"<p>Various components of malicious activity involve clients identifying as certain user agents. In some cases, client behavior can be pivoted upon between different IP addresses based on shared user agents. However, this is usually considered a relatively weak correlation, since the same user agent could have legitimate uses as well, unless it's unique.</p> <p>Given the IP address of a device infected with malware, or a machine running an attacker-side tool (such as a toolkit, crawler or scanner), analysts can review network activity logs to determine which user agents identify the IP address.</p> <p>Example</p> <p>Permiso identified a threat actor using S3 Browser and identifying as the user agent <code>S3 Browser 9.5.5 &lt;https://s3browser.com&gt;</code>. While this tool and user agent can be used legitimately, in this case it was never used by employees in the target environment, and was therefore unique to this actor's activity in that specific context.<sup>5</sup></p>"},{"location":"artifacts/ip-address/#servers","title":"Servers","text":""},{"location":"artifacts/ip-address/#servers-hosted-by-it","title":"Servers hosted by it","text":"<p>An IP address can host one or more servers on various ports. Scanning different ports can reveal new information about how a threat actor is using a given IP address.</p> <p>Host scanning services such as Shodan and Censys regularly scan the entire IPv4 space and report their findings in queryable databases.</p> Try it out Shodan (URL)Shodan (API) <pre><code>https://www.shodan.io/host/{IP_ADDRESS}\n</code></pre> <pre><code>$ curl -X GET \"https://api.shodan.io/shodan/host/{IP_ADDRESS}?key={YOUR_API_KEY}\"\n</code></pre>"},{"location":"artifacts/ip-address/#servers-with-same-fingerprint","title":"Servers with same fingerprint","text":"<p>Attacker-controlled servers operated by the same threat actor or that are part of the same campaign often have overlapping techstacks (meaning that they run the same set of software components). Moreover, these servers might be configured in the exact same way. This can result in a subset of malicious servers that can be uniquely identified by their fingerprint (or a set of fingerprint types), such as JARM, HHHash, one of the JA4+ fingerprints, HASSH, or the HTML Response Body Hash.</p>"},{"location":"artifacts/ip-address/#servers-with-same-title","title":"Servers with same title","text":"<p>When threat actors deploy open-source or commercial command and control servers, they often neglect to modify the default HTML title of the server, or they might reuse the same title across multiple deployments. Pivoting on the HTML title via host scanning platforms thereby allows analysts to discover additional such servers. However, when pivoting on default titles in particular, note that the resulting servers are unlikely to be operated by the same actor, but rather any actor that happened to make the same configuration mistake.</p> <p>Example</p> <p>Mythic C2 by default uses \"Mythic\" as its HTML title.<sup>9</sup></p>"},{"location":"artifacts/ip-address/#servers-with-same-banner-or-headers","title":"Servers with same banner or headers","text":"<p>Depending on the protocols in use, servers normally respond to clients with a specific canned response. HTTP/S servers return response headers, whereas non-HTTP servers return banners. Analysts can leverage this to perform a type of scan called banner grabbing to identify what applications are running on the server.</p> <p>Given an IP address, analysts can query host scanning platforms such as Censys to see the results of past scans of any servers it hosts.</p> <p>Example</p> <p>Until January 2019, Cobalt Strike team servers contained an \u201cextraneous space\u201d in their default HTTP response headers (after the word <code>OK</code> in <code>HTTP/1.1 200 OK</code>). At the time, this mistake could be leveraged for unique identification of such servers.<sup>6</sup></p>"},{"location":"artifacts/ip-address/#servers-with-same-favicon","title":"Servers with same favicon","text":"<p>Favicons are icons displayed in browser windows or tabs when viewing a given webpage, and they are usually associated with a specific company or software component. When threat actors reuse software between different servers, this sometimes leads to these servers also sharing the same favicon, which can be leveraged for pivoting by querying host scanning services such as Shodan (see this blogpost from Shodan for more information).</p>"},{"location":"artifacts/ip-address/#servers-with-similar-content","title":"Servers with similar content","text":"<p>When threat actors set up landing pages for a phishing campaign, they may reuse certain assets across multiple sites. Similarly, threat actors might inject the same malicious JavaScript or JavaScript tags into hijacked websites. This can be leveraged by analysts to pivot from one landing page or compromised website to others through host scanning platforms such as Censys or URL scanning platforms such as URLScan, by searching for these particular elements.</p> <p>In other cases, phishing websites operated by the same threat actor may only share their general visual appearance, which can occasionally be leveraged for pivoting as well, albeit as a much weaker signal, and only if content-based scanning fails to surface actual code overlap.</p> <p>Example</p> <p>Sucuri tracked a website hijacking campaign in which the threat actor compromised the hosting server and then injected malicious code into JavaScript files. This code consistently began with a unique string (<code>/*trackmyposs*/eval</code>). By querying PublicWWW for the indicative string, Sucuri were able to effectively identify many such compromised websites.<sup>7</sup></p>"},{"location":"artifacts/ip-address/#servers-with-same-url-path","title":"Servers with same URL path","text":"<p>Threat actors may set up various API endpoints on their servers to facilitate the required functionality for their malicious infrastructure. Each of these endpoints may be available on a different URL path (e.g., malware may connect to an <code>/upload/</code> endpoint to exfiltrate data). Similarly, threat actors may hijack legitimate servers and deploy a file containing malicious code, which may be located on a consistent URL path across multiple compromised servers.</p> <p>Therefore, given a server with an indicative URL path, analysts can run a wide scan to identify related servers with the same URL path that may be available on other IP addresses. Alternatively, analysts can query the databases of URL scanning services such as URLScan for a given URL path in order to surface domains resolving to potentially related servers.</p> Try it out URLScan (URL) <pre><code>https://urlscan.io/search/#page.url%3A%22{PATH}%22\n</code></pre>"},{"location":"artifacts/ip-address/#tls-certificates","title":"TLS Certificates","text":""},{"location":"artifacts/ip-address/#certificates-served-by-it","title":"Certificates served by it","text":"<p>Threat actors use TLS certificates to enable encrypted TLS communication between attacker-controlled servers, as well as between infected clients and attacker-controlled servers (such as for encrypting communication between malware and its C&amp;C server). If a threat actor deploys multiple servers as part of the same campaign, they might use the same certificate across a subset of their fleet, or use several certificates with partially overlapping details.</p> <p>Example</p> <p>The default configuration of Cobalt Strike servers is to use a specific self-signed TLS certificate (SHA-1 <code>6ECE5ECE4192683D2D84E25B0BA7E04F9CB7EB7C</code>). Some threat actors make the mistake of using this default certificate, which can be leveraged for identification.<sup>8</sup></p>"},{"location":"artifacts/ip-address/#samples","title":"Samples","text":""},{"location":"artifacts/ip-address/#samples-that-reference-it-in-their-code","title":"Samples that reference it in their code","text":"<p>By statically scanning a malware sample or reverse engineering it, analysts can identify server IP addresses that may be included in its source code, depending on how well the sample is obfuscated.</p> <p>Given an IP address, analysts can use \"malware zoo\" platforms such as VirusTotal to query for any such previously encountered samples.</p>"},{"location":"artifacts/ip-address/#samples-that-communicate-with-it-at-runtime","title":"Samples that communicate with it at runtime","text":"<p>By executing a malware sample in a sandboxed environment, or by observing the behavior of malware that has infected a honeypot, one can determine if the infected machine communicates with any IP addresses of C&amp;C or data exfiltration servers.</p> <p>Given an IP address, analysts can use \"malware zoo\" platforms such as VirusTotal to query for any such previously encountered samples.</p>"},{"location":"artifacts/ip-address/#samples-it-stores","title":"Samples it stores","text":"<p>Attacker-controlled servers hosted on an IP address may store malware for victim devices to download. Gaining access to such servers may therefore afford access to samples of aforementioned malware. Similarly, samples may be retrieved from infected clients by performing forensics, or through security product telemetry.</p> <ol> <li> <p>Tales from the cloud trenches: Using malicious AWS activity to spot phishing campaigns \u21a9</p> </li> <li> <p>Risky Business: Determining Malicious Probabilities Through ASNs \u21a9</p> </li> <li> <p>Latrodectus: This Spider Bytes Like Ice \u21a9</p> </li> <li> <p>Cobalt Strike Team Server Population Study \u21a9</p> </li> <li> <p>Anatomy of an Attack: Exposed Keys Lead to Crypto Mining \u21a9</p> </li> <li> <p>Identifying Cobalt Strike team servers in the wild \u21a9</p> </li> <li> <p>Massive WordPress JavaScript Injection Campaign Redirects to Ads  \u21a9</p> </li> <li> <p>Hunting Cobalt Strike Servers \u21a9</p> </li> <li> <p>A Beginner's Guide to Tracking Malware Infrastructure \u21a9</p> </li> </ol>"},{"location":"artifacts/sample/","title":"Sample","text":""},{"location":"artifacts/sample/#overview","title":"Overview","text":"<ul> <li> <p> Definition</p> <p> A sample is a copy of a malicious file such as a malware component, which can be reverse engineered to discover how it works and to extract indicators of compromise (IOCs). Samples are often represented using their SHA1, SHA256 or MD5 hash. </p> </li> <li> <p> Usecase</p> <p> Threat actors use different types of malicious software for various purposes - these can include malware deployed on victim devices (e.g., for backdooring or cryptojacking), botnet management software installed on C&amp;C servers, phishing infrastructure utilized on phishing landing pages, malicious scripts injected into hijacked webpages, and more. </p> </li> </ul> <ul> <li> <p> Example</p> <p> <code>88c8b472108e0d79d16a1634499c1b45048a10a38ee799054414613cc9dccccc</code> is the SHA-256 hash of a malware binary deployed on victim devices by the threat actor known as Black Basta.<sup>1</sup> </p> </li> </ul> <ul> <li> Pivot Map <pre><code>flowchart LR\n    classDef primary stroke-width: 2px\n    classDef secondary stroke-dasharray: 5 5\n\n    %% define nodes\n    IP_ADDRESS(IP Address)\n    DOMAIN(Domain)\n    SERVER([Server / Client])\n    SAMPLE(Sample):::primary\n    USER_AGENT(User Agent)\n    SAMPLE_(Sample):::secondary\n    CODE([Code])\n\n    %% define edges\n\n    SAMPLE -- references ---&gt; IP_ADDRESS\n    SERVER -. hosted by .-&gt; IP_ADDRESS\n    SERVER -- stores --&gt; SAMPLE\n    SAMPLE -- communicates ---&gt; SERVER\n    SAMPLE &lt;-- hash ---&gt; SAMPLE_\n    SAMPLE &lt;-- code similarity --&gt; SAMPLE_\n    SAMPLE &lt;-- behavior --&gt; SAMPLE_\n    SAMPLE &lt;-- observables --&gt; SAMPLE_\n\n    SAMPLE -- references ---&gt; DOMAIN\n    SAMPLE -- queries ---&gt; DOMAIN\n    SAMPLE -- references --&gt; USER_AGENT\n    SAMPLE -- identifies as ---&gt; USER_AGENT\n\n    CODE -. compiles to ..-&gt; SAMPLE\n\n    %% define links\n    click IP_ADDRESS \"#ip-addresses\"\n    click DOMAIN \"#domains\"\n    click SERVER \"#servers\"\n    click SAMPLE_ \"#samples\"\n    click USER_AGENT \"#user-agents\"\n    click CODE \"#source-code\"\n</code></pre></li> </ul> <p>Victim-side vs. attacker-side tooling</p> <p>When pivoting on a file sample, one must consider where the threat actor is expected to use it. For instance, while malware is more likely to be found within victim networks, toolkits and botnet management software are almost certain to only be identified on attacker-controlled servers.</p>"},{"location":"artifacts/sample/#pivots","title":"Pivots","text":""},{"location":"artifacts/sample/#clients","title":"Clients","text":""},{"location":"artifacts/sample/#clients-it-can-be-found-on","title":"Clients it can be found on","text":"<p>Samples of malware may be retrieved from infected clients by performing forensics, or through security product telemetry.</p> <p>Conversely, samples of attacker-side toolkits can be found on threat actor machines (e.g., their laptops) and remote jump boxes they operate for connecting to servers or infected devices.</p>"},{"location":"artifacts/sample/#servers","title":"Servers","text":""},{"location":"artifacts/sample/#servers-storing-it","title":"Servers storing it","text":"<p>Attacker-controlled servers may store malware for victim devices to download during an infection process. Gaining access to such servers may therefore afford access to samples of the aforementioned malware.</p>"},{"location":"artifacts/sample/#servers-it-communicates-with-at-runtime","title":"Servers it communicates with at runtime","text":"<p>By executing a malware sample in a sandboxed environment, by observing malware that has infected a honeypot, or by analyzing security product telemetry sourced from an infected device, one can determine if the infected machine communicates with any IP addresses of attacker-controlled servers for C&amp;C, data exfiltration, etc.</p>"},{"location":"artifacts/sample/#domains","title":"Domains","text":""},{"location":"artifacts/sample/#domains-it-references-or-queries","title":"Domains it references or queries","text":"<p>Threat actors often configure their malware to communicate with one or more C&amp;C servers, and this usually involves listing a domain within the malware's code (in such instances, the domain is said to be \"hardcoded\" in the malware).</p> <p>When executed (on an infected device, honeypot, or in a sandboxed environment), the malware will send a DNS request to resolve the domain, and then communicate with the server hosted on the resolving IP address. By running a static analysis of the sample (even through something as simple as using <code>strings</code>), one can reveal any such hardcoded domains it may contain.</p> <ul> <li> Pivot Minimap <pre><code>flowchart LR\n    classDef primary stroke-width: 2px\n    classDef secondary stroke-dasharray: 5 5\n    classDef tool fill:#1433F7, stroke:#556CFF, fill-opacity:0.2\n    classDef fingerprint fill:#02FF25, stroke:#02FF25, fill-opacity:0.2\n\n    %% define nodes\n    DOMAIN(Domain)\n    SAMPLE(Sample):::primary\n    sg1:::tool\n\n    FILE_HASH[File Hash]:::fingerprint\n\n\n    %% define edges\n    SAMPLE -. hashed to .-&gt; FILE_HASH\n    FILE_HASH -- queried in --&gt; sg2\n\n\n    subgraph sg1 [Malware Zoo]\n    subgraph sg2 [Database]\n    SAMPLE_(Sample):::secondary\n    end\n    subgraph sg3 [Analysis]\n    SANDBOX[Sandbox]\n    STRINGS[Strings]\n    end\n    end\n    SAMPLE -- uploaded to --&gt; sg3\n    SANDBOX -- queries --&gt; DOMAIN\n    STRINGS -- references --&gt; DOMAIN\n    SAMPLE_ -- relates to ---&gt; DOMAIN\n\n    %% define links\n    click SAMPLE_ \"#samples\"\n    click HASH \"/fingerprints/#file-hash\"\n    click MALWARE_ZOO \"/tools/#malware-zoos\"\n</code></pre></li> </ul>"},{"location":"artifacts/sample/#ip-addresses","title":"IP Addresses","text":""},{"location":"artifacts/sample/#ip-addresses-it-references","title":"IP addresses it references","text":"<p>By statically scanning a malware sample or reverse engineering it, analysts can identify server IP addresses that may be included in its source code, depending on how well the sample is obfuscated.</p>"},{"location":"artifacts/sample/#user-agents","title":"User Agents","text":""},{"location":"artifacts/sample/#user-agents-identifying-it-or-referenced-by-it","title":"User agents identifying it or referenced by it","text":"<p>Malware, attacker-side toolkits, and attacker-operated crawlers must identify as a specific user agent if they communicate over HTTP/S (as a requirement of the protocol). While most threat actors will therefore configure their tools to use a prevalent user agent (or rotate between a set of common user agents) in order to blend in with background noise, at times they might make the mistake of using a unique user agent (perhaps as result of a typo) or a nonsensical one (such as a machine identifying as an iPhone but fingerprinted as an IoT device). In such cases, the combination of user agent and other parameters might be uniquely identifiable enough to be used as an effective indicator for discovering infected clients or attacker-controlled infrastructure.</p> <p>By observing a given sample in a sandboxed environment, honeypot, infected device, or via security product telemetry, analysts can identify which user agents it identifies as. Similarly, analysts can reveal such user agents through static analysis or reverse engineering of the sample, depending on its level of obfuscation.</p>"},{"location":"artifacts/sample/#samples","title":"Samples","text":""},{"location":"artifacts/sample/#samples-with-same-hash","title":"Samples with same hash","text":"<p>Since a file hash is unique, querying for a hash in a \"malware zoo\" platform such as VirusTotal can lead to other copies of the same sample. This can be useful for analysis if these other copies have different metadata than the original, such as their filename, where they were uploaded from, and relationships with other artifacts (for example, one copy of the sample might have been stored in a compressed archive along with other, different samples, or it might have been available for download at one point from a phishing website).</p>"},{"location":"artifacts/sample/#samples-with-code-similarity-to-it","title":"Samples with code similarity to it","text":"<p>Threat actors may develop their tools over long periods of time, going through multiple iterations of the same tool. Additionally, they might reuse certain self-developed software components across more than one tool, or use the same development environment when working on different tools. In all of these cases, code similarity analysis can reveal such commonalities between different samples, if they exist.</p> <p>Analysts can upload a given sample to a code similarity platform, and check if any other previously uploaded samples are similar to it.</p>"},{"location":"artifacts/sample/#samples-with-overlapping-behavior","title":"Samples with overlapping behavior","text":"<p>Threat actors might develop several variations of the same tool, or implement overlapping functionality in different tools, depending on their operational requirements. By dynamically scanning a given sample in a sandbox, observing it on a honeypot, or monitoring it through security product telemetry, analysts can characterize the sample's behavior and map it to certain sets of TTPs. If these are unique enough, analysts can leverage this to surface additional samples exhibiting the same combination of behavioral traits, such as by querying for them in \"malware zoo\" platforms such as VirusTotal.</p>"},{"location":"artifacts/sample/#samples-with-overlapping-observables","title":"Samples with overlapping observables","text":"<p>Malware is not often deployed as a single file on the disk of an infected device, but rather leaves traces in multiple locations, such as files in certain paths, registry keys, process names, etc. By observing an infected device, sandbox, honeypot, or by checking security product telemetry, an analyst can identify such traces and leverage them to detect other instances of the same sample, or variants of it.</p> <p>Given a sample, analysts can use \"malware zoo\" platforms such as VirusTotal to query for any such previously encountered samples, usually using YARA rules for this purpose.</p>"},{"location":"artifacts/sample/#source-code","title":"Source Code","text":""},{"location":"artifacts/sample/#code-which-compiles-to-it","title":"Code which compiles to it","text":"<p>If a threat actor is using an open-source tool that isn't unique to their own operations, its source code is likely to be available in a code repository.</p> <p>Conversely, source code for proprietary tools can be found on attacker-controlled machines, and is sometimes published online as a result of hack-and-leak operations oconducted against the threat actor, or following internal disputes within threat actor groups.</p> <ol> <li> <p>#StopRansomware: Black Basta \u21a9</p> </li> </ol>"},{"location":"artifacts/tls-certificate/","title":"TLS Certificate","text":""},{"location":"artifacts/tls-certificate/#overview","title":"Overview","text":"<ul> <li> <p> Definition</p> <p> An SSL/TLS certificate allows systems to verify the identity of another system and establish an encrypted network connection between them using the SSL/TLS protocol. Certificates are often represented using a SHA1 or SHA256 fingerprint. </p> </li> <li> <p> Usecase</p> <p> Threat actors use these certificates much like in the legitimate usecase, such as to enable encrypted TLS communication between infected clients and C&amp;C servers. </p> </li> </ul> <ul> <li> <p> Example</p> <p> <code>cd4c0fe2cb8a00edf4e97a22f550e080a8732b1666c7a16dc01be4ac0ccb2244</code> is the SHA-1 hash of a certificate in use by <code>google.com</code> for a period of several weeks in 2024. </p> </li> </ul> <ul> <li> <p> Features</p> <p> The certificate used by <code>gopivoting.org</code> as of 2024-06-04 contains the following pivotable data:  <pre><code>Serial Number:\n    04:23:7a:e2:8d:c6:17:e3:78:6e:dd:e6:0a:42:24:40:1c:1e\nIssuer: (CA ID: 183267)\n    commonName                = R3\n    organizationName          = Let's Encrypt\n    countryName               = US\nValidity\n    Not Before: May 20 05:50:30 2024 GMT\n    Not After : Aug 18 05:50:29 2024 GMT\nSubject:\n    commonName                = gopivot.ing\n</code></pre></p> </li> </ul> <ul> <li> Pivot Map <pre><code>flowchart LR\n    classDef primary stroke-width: 2px\n    classDef secondary stroke-dasharray: 5 5\n\n    %% define nodes\n    DOMAIN(Domain)\n    SERVER([Server])\n    IP_ADDRESS(IP Address)\n    TLS_CERT(TLS Certificate):::primary\n    TLS_CERT_(TLS Certificate):::secondary\n\n    %% define edges\n    TLS_CERT -- served by ---&gt; SERVER\n    SERVER -. hosted by ..-&gt; IP_ADDRESS\n    TLS_CERT -- CN ---&gt; DOMAIN\n    TLS_CERT &lt;-- CN ---&gt; TLS_CERT_\n    TLS_CERT &lt;-- subject ---&gt; TLS_CERT_\n    TLS_CERT &lt;-- CA ---&gt; TLS_CERT_\n    TLS_CERT &lt;-- time --&gt; TLS_CERT_\n\n    %% define links\n    click DOMAIN \"#domains\"\n    click SERVER \"#servers\"\n    click TLS_CERT_ \"#tls-certificates\"\n</code></pre></li> </ul>"},{"location":"artifacts/tls-certificate/#pivots","title":"Pivots","text":""},{"location":"artifacts/tls-certificate/#servers","title":"Servers","text":""},{"location":"artifacts/tls-certificate/#servers-serving-it","title":"Servers serving it","text":"<p>Threat actors use TLS certificates to enable encrypted TLS communication between attacker-controlled servers, as well as between infected clients and attacker-controlled servers (such as for encrypting communication between malware and its C&amp;C server). If a threat actor deploys multiple servers as part of the same campaign, they might use the same certificate across a subset of their fleet, or use several certificates with partially overlapping details.</p> <p>Given a certificate, analysts can query host scanning services such as Shodan and Censys for the certificate itself (by its hash) or for any of its individual details (such as serial number or common name) to identify potentially related servers.</p> <p>Example</p> <p>The default configuration of Cobalt Strike servers is to use a specific self-signed TLS certificate (SHA-1 <code>6ECE5ECE4192683D2D84E25B0BA7E04F9CB7EB7C</code>). Some threat actors make the mistake of using this default certificate, which can be leveraged for identification.<sup>1</sup></p> Try it out Shodan (URL) - Serial numberShodan (URL) - CNCensys (URL) - SHA-256 HashCensys (URL) - Serial numberCensys (URL) - CN <pre><code>https://www.shodan.io/search?query=ssl.cert.serial%3A{SERIAL_NUMBER}\n</code></pre> <pre><code>https://www.shodan.io/search?query=ssl.cert.subject.cn%3A{COMMON_NAME}\n</code></pre> <pre><code>https://search.censys.io/search?resource=hosts&amp;q=services.tls.certificates.leaf_data.fingerprint%3A+{SHA256_HASH}\n</code></pre> <pre><code>https://search.censys.io/search?resource=certificates&amp;q=parsed.serial_number%3A+{SERIAL_NUMBER}\n</code></pre> <pre><code>https://search.censys.io/search?resource=hosts&amp;q=services.tls.certificate.parsed.subject.common_name%3A{COMMON_NAME}\n</code></pre>"},{"location":"artifacts/tls-certificate/#domains","title":"Domains","text":""},{"location":"artifacts/tls-certificate/#domains-matching-its-cn","title":"Domains matching its CN","text":"<p>TLS certificates contain many fields denoting registrant information, registar information, and various \"names\" indicating which domain or subdomains the certificate applies to. Further pivoting on the domain listed in the common name field (CN) can lead to other certificates listing the same one or similar ones.</p> <p>Example</p> <p>Embee Research analyzed certificate data related to a domain associated with MatanBuchus in order to surface additional domains using certificates with the same subdomains, certificate authority, and registration period.<sup>2</sup></p>"},{"location":"artifacts/tls-certificate/#tls-certificates","title":"TLS Certificates","text":""},{"location":"artifacts/tls-certificate/#certificates-with-same-cn","title":"Certificates with same CN","text":"<p>Threat actors may register more than one certificate with the same common name (CN), and use each certificate on a different server, even if the domain name resolving to a server does not match the common name of the certificate.</p> <p>Given a certificate, analysts can query certificate databases for its CN to identify potentially related certificates.</p> <p>Example</p> <p>ThreatConnect identified an IP address associated with APT28 serving a certificate that listed the common name <code>ecitcom[.]net</code>. Pivoting on this name led to several other servers using certificates with the same CN, that resolved domains with completely different names.<sup>3</sup></p> Try it out crt.sh (URL) <pre><code>https://crt.sh/?CN={COMMON_NAME}\n</code></pre>"},{"location":"artifacts/tls-certificate/#certificates-with-similar-subject-details","title":"Certificates with similar subject details","text":"<p>Threat actors may reuse certain subject details when registering more than one certificate. If these details are relatively unique (on their own or in combination), analysts can pivot on them to discover additional potentially related certificates.</p> <p>Given a certificate, analysts can query certificate databases for any of its subject details (individually or in combination) to identify potentially related certificates.</p>"},{"location":"artifacts/tls-certificate/#certificates-registered-with-same-ca","title":"Certificates registered with same CA","text":"<p>Threat actors may register multiple certificates using the same certificate authority (CA), which is listed in the issuer organization field. If the CA itself is uncommon, or if a combination of CA and other factors is relatively unique, analysts can leverage this commonality to identify additional certificates registered by the same actor.</p> <p>Given a certificate, analysts can query certificate databases for the CA (or the CA in combination with other fields) to identify potentially related certificates.</p> Try it out crt.sh (URL)Censys (URL) <pre><code>https://crt.sh/?CAName={CA_NAME}\n</code></pre> <pre><code>https://search.censys.io/search?resource=certificates&amp;q=parsed.issuer.common_name%3A{CA_NAME}\n</code></pre>"},{"location":"artifacts/tls-certificate/#certificates-registered-in-the-same-timeframe","title":"Certificates registered in the same timeframe","text":"<p>Threat actors may register many TLS certificates throughout their period of activity, or for the purpose of a particular operation or campaign. In order to maintain OPSEC, threat actors may register every certificate at a different time and at irregular intervals. However, less savvy threat actors could very well register many of their certificates around the same time, a mistake which analysts can leverage along with other parameters in order to identify additional potentially related certificates.</p> <p>Example</p> <p>ThreatConnect determined that most certificates suspected to be in use by APT28 as of March 2018 were registered during working hours of Moscow's time zone. While this wasn't unique enough for pivoting to unknown certificates, it did serve to increase their confidence in their attribution of related activity to this threat actor.<sup>3</sup></p> <ol> <li> <p>Hunting Cobalt Strike Servers \u21a9</p> </li> <li> <p>Identifying MatanBuchus Domains Through Hardcoded Certificate Values \u21a9</p> </li> <li> <p>A Song of Intel and Fancy \u21a9\u21a9</p> </li> </ol>"},{"location":"artifacts/user-agent/","title":"User Agent","text":""},{"location":"artifacts/user-agent/#overview","title":"Overview","text":"<ul> <li> <p> Definition</p> <p> The <code>User-Agent</code> request header in HTTP/S communication allows servers to identify various properties of the client, such as what operating system and browser they're using. </p> </li> <li> <p> Usecase</p> <p> Threat actors often configure their tools to use common user agents in order to blend in with legitimate communications, but they sometimes make mistakes such as typos or choosing a nonsensical user agent, which can allow detection and pivoting (e.g., an infected Linux machine using a Windows user agent). </p> </li> </ul> <ul> <li> <p> Example</p> <p> Rietspoof is a type of malware known to use a hardcoded user agent: <code>Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1</code>.<sup>1</sup> </p> </li> </ul> <ul> <li> Pivot Map <pre><code>flowchart LR\n    classDef primary stroke-width: 2px\n    classDef secondary stroke-dasharray: 5 5\n\n    %% define nodes\n    IP_ADDRESS(IP Address)\n    SAMPLE(Sample)\n    CLIENT([Client])\n    USER_AGENT(User Agent):::primary\n    USER_AGENT_(User Agent):::secondary\n\n    %% define edges\n    IP_ADDRESS -. hosts .-&gt; CLIENT\n    CLIENT -- identifies as --&gt; USER_AGENT\n    USER_AGENT &lt;-- similar ---&gt; USER_AGENT_\n    SAMPLE -- identifies as --&gt; USER_AGENT\n    SAMPLE -- references --&gt; USER_AGENT\n\n    %% define links\n    click IP_ADDRESS \"#ip-addresses\"\n    click SAMPLE \"#samples\"\n    click USER_AGENT_ \"#user-agents\"\n</code></pre></li> </ul> <p>Unique user agents</p> <p>In some cases, client behavior can be pivoted upon between different IP addresses based on shared user agents. However, this is usually considered a relatively weak correlation, since the same user agent could have legitimate uses as well, unless it's unique. Identifying such unique attributes or combinations of attributes is one of the many challenges of analysis.</p>"},{"location":"artifacts/user-agent/#pivots","title":"Pivots","text":""},{"location":"artifacts/user-agent/#ip-addresses","title":"IP Addresses","text":""},{"location":"artifacts/user-agent/#addresses-of-clients-identifying-as-it","title":"Addresses of clients identifying as it","text":"<p>Various components of malicious activity involve clients identifying as certain user agents. This includes devices infected with malware, machines running attacker-side toolkits, as well as machines running crawlers and scanners.</p> <p>Given a user agent, analysts can review any available access logs or honeypot logs for matching connections, thereby surfacing the clients' associated IP addresses.</p> <p>For crawlers and scanners in particular, by using platforms such as GreyNoise that operate honeypots and enable users to query their database, analysts can query for a given user agent and thereby identify any IP addresses that identify as it when conducting Internet-wide scans.</p> <p>Example</p> <p>Obsidian Security identified a malicious residential proxy network in which the threat actor had configured their malware to use an outdated Chrome user agent from 2019, which is rare enough as of 2024 to be a strong indicator.<sup>2</sup></p> Try it out GreyNoise (URL) <pre><code>https://viz.greynoise.io/query/raw_data.web.useragents:\"{USER_AGENT}\"\n</code></pre>"},{"location":"artifacts/user-agent/#samples","title":"Samples","text":""},{"location":"artifacts/user-agent/#samples-identifying-as-it-or-referencing-it","title":"Samples identifying as it or referencing it","text":"<p>Malware, attacker-side toolkits, and attacker-operated crawlers must identify as a specific user agent if they communicate over HTTP/S (as a requirement of the protocol). While most threat actors will therefore configure their tools to use a prevalent user agent (or rotate between a set of common user agents) in order to blend in with background noise, at times they might make the mistake of using a unique user agent (perhaps as result of a typo) or a nonsensical one (such as an IoT device identifying as an iPhone). In such cases, the combination of user agent and other parameters might be uniquely identifiable enough to be used as an effective indicator for discovering infected clients or attacker-controlled infrastructure.</p> <p>Given a user agent, analysts can use \"malware zoo\" platforms such as VirusTotal to query for any previously encountered samples identifying as it or referencing it in their code.</p>"},{"location":"artifacts/user-agent/#user-agents","title":"User Agents","text":""},{"location":"artifacts/user-agent/#user-agents-similar-to-it","title":"User agents similar to it","text":"<p>Some user agents are indicative of a specific framework or toolkit, such as the <code>python-requests/$version</code> user agent indicating a client using the Python Requests library (where <code>$version</code> is the library version in use). If an attacker-controlled client has been observed identifying as such a user agent, analysts can leverage this to search for activity originating from other clients identifying as similar user agents, such as those indicative of other versions of the same framework.</p> <p>Similarly, if a threat actor uses a jumpbox with a genuine user agent (as opposed to a spoofed one) when connecting to devices in a target network, they might occasionally update their operating system and browser, which would lead to small changes to their user agent over time. However, these changes can be accounted for through similarity analysis, in order to identify sessions that might originate from the same attacker-controlled machine.</p> <ol> <li> <p>Spoofing in the reeds with Rietspoof \u21a9</p> </li> <li> <p>Emerging Identity Threats: The Muddy Waters of Residential Proxies \u21a9</p> </li> </ol>"},{"location":"fingerprints/","title":"Fingerprints","text":"<p>In order to make threat intel sharing easier and analysis more practical, reports and feeds rely on fingerprinting as a sort of shorthand for representing artifacts. These fingerprints are commonly refered to as IOCs, short for \"Indicators of Compromise\".</p> <p>Some fingerprints are \"lossless\", in the sense that they are a one-to-one representation of a single specific artifact, while other fingerprints are \"lossy\", in the sense that they might represent a one-to-many representation of different artifacts with some common property.</p> <p>Additionally, some fingerprints are are considered fuzzy, meaning that similar artifacts have similar fingerprints (e.g., two files that differ by only one byte will have nearly identical ssdeep hashes).</p>"},{"location":"fingerprints/#file-hash","title":"File Hash","text":"<p>File samples can be hashed using various methods, the most common of which are SHA-1, SHA-256 (SHA-2 with a digest size of 256 bits) and MD5. Additionally, files are sometimes hashed using fuzzy hashing algorithms such as CTPH (short for \"Context Triggered Piecewise Hash\"), commonly implemented by a tool called ssdeep.</p> <p>Threat intel practitioners use file hashes as one-to-one representations of specific malicious files (while mostly ignoring the possibility of hash collisions).</p>"},{"location":"fingerprints/#certificate-hash","title":"Certificate Hash","text":"<p>TLS certificates can be hashed using various methods, the most common of which are SHA-1 and SHA-256.</p> <p>Much like file hashes, threat intel practitioners use certificate hashes as one-to-one representations of specific certificates.</p>"},{"location":"fingerprints/#html-response-body-hash","title":"HTML Response Body Hash","text":"<p>It is possible to create a SHA-1, SHA-256 or MD5 fingerprint of an HTML server's response body. This fingerprint can serve as a useful pivot point if the HTML response body is unique enough in comparison to other HTML servers, while also being identical across different deployments of the same malicious server. It is possible to query for this fingerprint on host scanning platforms. This blogpost by Embee Research illustrates one possible example of its use.</p>"},{"location":"fingerprints/#ja4-fingerprints","title":"JA4+ Fingerprints","text":"<p>JA4+ is a set of methods for fingerprinting various types of clients and servers hosted on IP addresses based on specific aspects of the network traffic they generate. JA4+ builds upon its previous iterations, JA3 and JA3S (originally named after the first letters of its inventors' names).</p> <p>The JA4+ set of fingerprinting methods includes the following: - JA4 is the TLS Client fingerprint. It is based on the TLS Client Hello packet. - JA4Server (JA4S) is the TLS Server/Session fingerprint. It is based on the TLS Server Hello packet. - JA4HTTP (JA4H) is the HTTP Client fingerprint. It is based on the HTTP request sent by a client. - JA4Latency (JA4L) is the Light Distance/Location fingerprint. The distance is measured by looking at the latency between packets at session setup. - JA4X509 (JA4X) is the X509 TLS Certificate fingerprint. It fingerprints how a certificate is created. - JA4SSH is the SSH Traffic fingerprint. It fingerprints SSH sessions by looking at SSH packets. - JA4TCP (JA4T) is a passive TCP Client fingerprint (more details are available here). It is based on the client\u2019s TCP SYN packet. - JA4TCPServer (JA4TS) is a passive TCP Server Response fingerprint. It is based on the SYN-ACK response of a server. - JA4TCPScan (JA4TScan) is the active TCP Server fingerprint.</p>"},{"location":"fingerprints/#jarm-fingerprint","title":"JARM Fingerprint","text":"<p>JARM is an active TLS server fingerprinting tool (also named after the first letters of its inventors' names). JARM is \"active\" in the sense that it involves sending multiple TLS Client Hello packets to a target server and recording certain attributes of the resulting TLS Server Hello responses, which are then hashed.</p>"},{"location":"fingerprints/#hhhash-fingerprint","title":"HHHash Fingerprint","text":"<p>HTTP Headers Hashing is a technique used to create a fingerprint of an HTTP server based on the headers it returns.</p>"},{"location":"fingerprints/#hassh","title":"HASSH","text":"<p>HASSH, developed by Ben Reardon, is a fingerprinting technique used to identify specific Client (<code>hassh</code>) and Server (<code>hasshServer</code>) SSH implementations. HASSH fingerprints combine key exchange methods, encryption methods, message auth methods, and compression algorithms from <code>SSH_MSG_KEXINIT</code> packets.</p>"},{"location":"fingerprints/#ip-address-feature-vector","title":"IP Address Feature Vector","text":"<p>IP similarity is a method developed by Greynoise to measure similarity between different IP addresses by calculating a vector of certain features (such as which user agents identify any clients connecting from the IP address, which ports they scan for on other servers, and which URL paths they enumerate).</p>"},{"location":"impact/","title":"Impact","text":"<p>This section discusses how analysts can utilize artifacts discovered during threat investigations in ways that are impactful. The items listed here are ranked according to their long-term impact, from least to most impactful (though low-impact activities often serve as building blocks for high-impact activities).</p>"},{"location":"impact/#monitoring","title":"Monitoring","text":"<p>Once an artifact has been identified and all immediate pivoting opportunities have been exhausted, analysts can continue to monitor for new attacker activity related to the artifact, such as new domains registered with familiar registration details, or new samples communicating with a known domain at runtime (some \"malware zoo\" platforms lend themselves rather well to this kind of activity, such as VirusTotal's Hunting feature, which notifies the user whenever a new sample is uploaded to VirusTotal's corpus that matches a given YARA rule).</p> <p>If the analyst's patience pays off, the original artifact (or set of artifacts) can become the core of a threat activity cluster, which serves to surface additional malicious infrastructure and tooling. In other words, analysts can utilize artifacts by continuously pivoting off them (ideally via automation) in order to discover additional artifacts.</p> <p>While monitoring is necessary, its real-world impact in and of itself is limited, since it has zero effect on an organization's defensive posture; artifacts must be operationalized in order to be impactful.</p>"},{"location":"impact/#detection","title":"Detection","text":"<p>One way to operationalize artifacts and fingerprints is to use them as IOCs in detection mechanisms such as those found in EDRs. This usually means building detection rules that check the reputation of a given file, IP address, domain, etc. against a list of known malicious artifacts, or building rules that check for content or behavior that matches those of such artifacts.</p> <p>Some artifacts and fingerprints are more useful as IOCs than others \u2014 this has to do with the longevity and uniqueness of certain artifact types which makes them better suited for reliably detecting malicious activity. For more on this, be sure to look up the Pyramid of Pain, also discussed here.</p> <p>Beyond straight-forward detection rules, analysts can also study a threat actor's behavior and tooling to determine their goals and modus operandi (also known as TTPs). This can be useful for building more robust behavioral detection rules, as well as devising potential lures for deception purposes, such as honeypots and decoy environments designed to take advantage of an actor's motivations. For example, if a threat actor is known to employ malware that scans infected hosts for cloud API keys, an analyst can set up a vulnerable Internet-facing honeypot containing an AWS API canary token in the hopes that the threat actor will compromise it, steal the token, and attempt to use it, thereby revealing their IP address to the analyst.</p>"},{"location":"impact/#threat-hunting","title":"Threat hunting","text":"<p>Beyond detection, analysts can also use artifacts and fingerprints for threat hunting purposes, by following up on detections and investigating further. Moreover, analysts can utilize low-confidence IOCs or TTPs by incorporating them in hunting rules (such IOCs might be considered unfit for production-grade detection rules on account of generating too many noisy false positives). By manually reviewing the results of such rules, analysts might discover semi-related threat activity and thereby surface new high-confidence IOCs.</p>"},{"location":"impact/#prevention","title":"Prevention","text":"<p>Analysts can incorporate artifacts and fingerprints in blocking mechanisms, such as firewalls which block access from known malicious IP addresses (note that due to the dynamic nature of the IP address space, IP addresses should only be blocked for limited periods of time, since a malicious address will eventually change hands).</p> <p>Additionally, analysts can study the behavior of attackers and their tooling, and operationalize their knowledge for prevention purposes. For instance, an understanding of the details of malicious activity can be translated into building runtime blocking mechanisms that limit the execution of processes that match known malicious behavioral patterns. Similarly, this knowledge can (indirectly) serve the development process of security controls for detecting risks exploited by threat actors, such as writing new Nuclei templates for identifying vulnerable or misconfigured servers.</p> <p>The latter approach can be taken a step further by developing mitigations that block certain types of malicious behavior entirely, such as refactoring old code while switching to a memory-safe language in order to eliminate dangerous bug classes, or disabling highly abusable features (such as blocking execution of macros in Microsoft Office documents downloaded from the Internet).</p>"},{"location":"impact/#collaboration","title":"Collaboration","text":"<p>Analysts can share information gleaned from an investigation with other analysts working at other organizations, or even include their findings in a public report as a way to share them with everyone (including threat actors, unfortunately, who will get the chance to learn from their mistakes and improve their operational security, making future detection more difficult).</p> <p>Sharing information with other trusted analysts is mutually beneficial, since every organization has different (at times overlapping) visibility into threat activity, depending on their business sector, types of monitored environments, and other differentiators.</p>"},{"location":"impact/#friction","title":"Friction","text":"<p>A potential goal of industry collaboration, as well as public-private partnerships, can be to hinder malicious activity through coordinated takedowns of attacker infrastructure. This can be achieved by leveraging legal systems (such as claiming copyright to phishing domains), or conducting proactive cyber activity (such as gaining access to infected devices and remotely reverting the infection).</p> <p>While these activities typically don't deter threat actors in the long term, they do cause friction that can slow them down and raise their operating costs significantly.</p>"},{"location":"impact/#attribution","title":"Attribution","text":"<p>Highly effective pivoting can occasionally lead to artifacts that indicate the real-world identity of the associated threat actor. Attribution is sometimes made possible due to threat actors' OPSEC mistakes (such as using real registrant information when leasing an IP address), or due to threat actors reusing certain artifacts for different operations (such as IP addresses or proprietary malware).</p> <p>Attribution is also sometimes the result of research involving cross-referencing open-source information gleaned from pivoting with classified intelligence obtained from elsewhere, though this process is normally only achievable by governments or through public-private partnerships.</p>"},{"location":"impact/#cost-imposition","title":"Cost imposition","text":"<p>Attribution itself can be operationalized in order to impose cost (whether personal or national) and coerce threat actors to change their behavior through deterrence.</p> <p>Another possible goal is to make the problem go away in the most literal and long-term sense, such as through legal or even military action (in cyberspace or beyond). For instance, once a hacker's identity is revealed, they can be arrested and incarcerated. Similarly, governments can sanction the individuals and organizations behind malicious state-sponsored activity, or respond to cyber activity in kind.</p>"},{"location":"map/","title":"Map","text":"<p>The following Mermaid diagram shows all possible pivots between various artifact types, as detailed in other smaller diagrams found throughout this website. A short explanation of how to read this map is available here (detailing the meaning of dotted lines, dashed borders, and other design choices). Note that the list of pivots and artifacts displayed here isn't conclusive, and will grow and change as more content is added to this website. The diagram may take a few seconds to load in your browser if you're visiting for the first time.</p> <pre><code>flowchart LR\n    classDef secondary stroke-dasharray: 5 5\n\n    %% define nodes\n    CODE([Code])\n    DOMAIN(Domain)\n    DOMAIN_(Domain):::secondary\n    IP_ADDRESS(IP Address)\n    IP_ADDRESS_(IP Address):::secondary\n    SAMPLE(Sample)\n    SAMPLE_(Sample):::secondary\n    SERVER([Server / Client])\n    SERVER_([Server / Client]):::secondary\n    USER_AGENT(User Agent)\n    USER_AGENT_(User Agent):::secondary\n    TLS_CERT(TLS Certificate)\n    TLS_CERT_(TLS Certificate):::secondary\n\n    %% define edges\n    DOMAIN -- forward DNS ---&gt; IP_ADDRESS\n    DOMAIN &lt;-- DNS history ---&gt; IP_ADDRESS\n    DOMAIN &lt;-- NS ---&gt; DOMAIN_\n    DOMAIN &lt;-- reg. time ---&gt; DOMAIN_\n    DOMAIN &lt;-- registrant ---&gt; DOMAIN_\n    DOMAIN &lt;-- registrar ---&gt; DOMAIN_\n    DOMAIN &lt;-- similar name ---&gt; DOMAIN_\n    DOMAIN &lt;-- TLD ---&gt; DOMAIN_\n    DOMAIN &lt;-- URL path ---&gt; DOMAIN_\n    TLS_CERT -- CN  ---&gt; DOMAIN\n    TLS_CERT -- served by  --&gt; SERVER\n    TLS_CERT_ &lt;-- CA  --&gt; TLS_CERT\n    TLS_CERT_ &lt;-- CN  --&gt; TLS_CERT\n    TLS_CERT_ &lt;-- subject  --&gt; TLS_CERT\n    TLS_CERT_ &lt;-- time ---&gt; TLS_CERT\n    IP_ADDRESS -- reverse DNS  ---&gt; DOMAIN\n    IP_ADDRESS -. hosts ..-&gt; SERVER\n    IP_ADDRESS &lt;-- ASN ---&gt; IP_ADDRESS_\n    IP_ADDRESS &lt;-- traffic ---&gt; IP_ADDRESS_\n    IP_ADDRESS &lt;-- ports ---&gt; IP_ADDRESS_\n    IP_ADDRESS &lt;-- WHOIS details  ---&gt; IP_ADDRESS_\n    IP_ADDRESS &lt;-- WHOIS history  ---&gt; IP_ADDRESS_\n    USER_AGENT &lt;-- similar  --&gt; USER_AGENT_\n    SERVER -- identifies as ---&gt; USER_AGENT\n    SERVER -- stores --&gt; SAMPLE\n    SERVER &lt;-- banner  ---&gt; SERVER_\n    SERVER &lt;-- content ---&gt; SERVER_\n    SERVER &lt;-- favicon ---&gt; SERVER_\n    SERVER &lt;-- fingerprint ---&gt; SERVER_\n    SERVER &lt;-- URL path ---&gt; SERVER_\n    SERVER -- identifies as --&gt; USER_AGENT\n    SAMPLE_ &lt;-- hash  ---&gt; SAMPLE\n    SAMPLE_ &lt;-- behavior ---&gt; SAMPLE\n    SAMPLE_ &lt;-- code similarity ---&gt; SAMPLE\n    SAMPLE -- communicates --&gt; SERVER\n    SAMPLE -- connects --&gt; SERVER\n    SAMPLE_ &lt;-- observables ---&gt; SAMPLE\n    SAMPLE -- identifies as ---&gt; USER_AGENT\n    SAMPLE -- queries ---&gt; DOMAIN\n    SAMPLE -- references  ---&gt; DOMAIN\n    SAMPLE -- references ---&gt; IP_ADDRESS\n    SAMPLE -- references --&gt; USER_AGENT\n    CODE -. compiles to ..-&gt; SAMPLE\n\n    %% define links\n    click DOMAIN \"/artifacts/domain/\"\n    click IP_ADDRESS \"/artifacts/ip-address/\"\n    click SAMPLE \"/artifacts/sample/\"\n    click TLS_CERT \"/artifacts/tls-certificate/\"\n    click USER_AGENT \"/artifacts/user-agent/\"\n</code></pre>"},{"location":"tips/","title":"Tips","text":"<p>This section lists various tips for beginning pivoters. If you'd like to learn more about pivoting in particular and threat intel research in general, be sure to check out the references mentioned in the FAQ.</p>"},{"location":"tips/#focus-on-rarity","title":"Focus on rarity","text":"<p>As a rule, queries that return more results are less helpful than those that return less results, since the former requires a lot of manual sifting. To be more specific, we should strive to run queries that return a set of results in which many are relevant to our investigation. The technical term for this quality of results is called precision.</p> <p>For this reason, it makes sense to pivot on rare (low-prevalence) properties of artifacts, since these are most likely to return precise results, and thereby more easily surface new information.</p> <p>For example, if a suspicious server has many properties which are shared by thousands of other servers (such as listening on port 80), but its IP address is located in a small ASN with only a few dozen other addresses, then you should probably prioritize the ASN for further investigation before pursuing other avenues of exploration.</p> <p>One way of identifying rare properties is frequency analysis, which involves calculating the prevalence of every property of a given artifact in order to identify outliers of interest. Some platforms perform these calculations for you, such as the \"Guided Pivots\" feature of DomainTools. This process can be especially helpful if an investigation has so far only surfaced a small number of artifacts, by highlighting which aspects of those artifacts are the most pivotable. However, frequency analysis can also be useful when a pivot surfaces too many artifacts, as it can be used to prioritize artifacts with the rarest properties, which are usually most likely to be interesting and therefore worth pursuing further.</p>"},{"location":"tips/#use-both-inclusion-and-exclusion","title":"Use both inclusion and exclusion","text":"<p>In order to build high-precision queries, it can often be helpful to use a mix of inclusions (<code>X AND Y</code>) and exclusions (<code>X AND NOT Y</code>). Exclusions can compensate for situations where the things we're searching for have mostly non-unique features. Let's say we encounter a malicious Python script and set out looking for other similar scripts. Merely being written in Python is hardly unique, and while there are many possible inclusions we could use, such as specific lines of code which we might expect to appear in other variants, we can also consider incorporating exclusions in our query in order to further improve precision. For example, we could try ruling out the usage of certain common imports that are unlikely to be used in malware; any sort of licensing information; or comments.</p> <p>To learn more about querying strategies, check out this blogpost.</p>"},{"location":"tips/#combine-multiple-pivots","title":"Combine multiple pivots","text":"<p>Having considered the significance of rarity, during your investigations you may yet encounter artifacts with properties that don't stand out among the rest in any significant way. However, sometimes you can identify rarity by filtering on multiple properties at once.</p> <p>For instance, let's say a phishing website is hosted on a server that listens on port 80, uses a TLS certificate issued by GlobalSign, contains placeholder HTML content that can be found on thousands of other websites, and its domain was registered on May the 4th, 2024. While each of these properties in and of themselves isn't rare enough to be significant (querying for each of them separately would yield anywhere between thousands and millions of results), in combination they are probably unique enough to surface only a dozen or so other servers with the exact same combination of properties, which may all be associated with the same phishing campaign.</p>"},{"location":"tips/#check-multiple-databases-and-tools","title":"Check multiple databases and tools","text":"<p>Pivot between different databases, and avoid fixating on a single database. Adjust your querying strategy according to the characteristics of each database.</p>"},{"location":"tips/#cross-reference-between-different-types-of-databases","title":"Cross-reference between different types of databases","text":"<p>If you have access to open-source, commercial and private data (generated by you or the company you work for), it's always a good idea to cross-reference between these various databases, especially between your private data and data available to others. This raises the likelihood of reaching conclusions unique to your own visibility. In other words, it allows you to reveal information that you are in a unique position to uncover, meaning that your discoveries are more likely to be novel.</p>"},{"location":"tips/#always-search-for-prior-art","title":"Always search for prior art","text":"<p>Before diving deep into an investigation, be sure to query for the artifacts and fingerprints in threat intelligence databases. Additionally, consider that others may have recorded and organized the information you seek in ways that seem counterintuitive.</p>"},{"location":"tips/#dont-be-afraid-of-manual-sifting","title":"Don't be afraid of manual sifting","text":"<p>As a rule, quantity is more important than quality. It\u2019s okay to compromise on low precision and sift through many results, as long as we\u2019re quite confident in our recall (otherwise we\u2019re at greater risk of wasting our time). While we should hope to find \u201choly grails\u201d in our data (as in a single piece of information that answers our research questions), it\u2019s more feasible to discover lots of smaller bits of information that we can piece together to reach an important conclusion - we must not let this discourage us.</p>"},{"location":"tips/#invest-in-documentation","title":"Invest in documentation","text":"<p>Record the information you discover while including the exact source (so you can return to reexamine it later and also use it as a reference in your research products), as well as any notes on ideas or possible connections to other pieces of information you\u2019ve encountered so far. Additionally, you should tag the information so that you can more easily retrieve it from your corpus at a later point in time.</p> <p>For this purpose, you can use dedicated threat intel platforms such as Yeti, Synapse, or others described in the tools section. Alternatively, you might want to look into general knowledge management software such as Notion or Obsidian.</p>"},{"location":"tools/","title":"Tools","text":"<p>This section lists various tools and platforms that enable pivoting on a given artifact or fingerprint. Every tool on this list allows analysts to perform different types of pivots on different types of data, and analysts must usually utilize multiple tools in order to conduct a full-scale investigation.</p> <p>This aspect of analysis is made evident in the comparison table below, which demonstrates that no single tool is sufficient for all types of pivots. Moreover, every platform is likely to contain slightly different data depending on its unique visibility and user base. Having said that, some platforms do offer more pivots than others, and enrichment platforms can serve as combo tools for querying multiple tools at once for any given artifact or fingerprint.</p>"},{"location":"tools/#overview","title":"Overview","text":"WHOIS DNS Hosts Certs Honeypots URLs Samples Sandbox Code Sim. Code Traffic Enrich Whoxy DNSChecker MXToolBox DNSlytics SecurityTrails DomainTools RiskIQ Driftnet Silent Push Validin IPinfo dnstwist Spamhaus ZETAlytics Circle.lu Shodan Censys BinaryEdge FOFA Hunt.io ZoomEye crt.sh GreyNoise OTX URLScan PublicWWW Wayback Machine VirusTotal MalShare MalwareBazaar HybridAnalysis any.run Joe's Sandbox filescan.io ThreatFox Intezer Analyse GitHub Search Team Cymru Similarweb MISP Cortex Yeti IntelOwl Vertex Synapse Maltego Malwoverview Mitaka"},{"location":"tools/#certificate-data","title":"Certificate data","text":""},{"location":"tools/#registered-certificates","title":"Registered certificates","text":"<p>Certificate transparency log aggregators such as crt.sh allow querying for metadata related to registered TLS certificates.</p>"},{"location":"tools/#observed-certificates","title":"Observed certificates","text":"<p>Many host scanning tools provide certificate metadata sourced from the servers hosting them.</p>"},{"location":"tools/#source-code-scanners","title":"Source code scanners","text":"<p>Source code repositories such as GitHub allow querying for code snippets, which can be useful for identifying malware source code.</p>"},{"location":"tools/#whois-data","title":"WHOIS data","text":""},{"location":"tools/#whois-lookup","title":"WHOIS Lookup","text":"<p>Tools such as DNSChecker allow querying for current WHOIS information about domains and IP addresses.</p> <p>You can also use a WHOIS CLI tool to perform lookups.</p>"},{"location":"tools/#whois-history","title":"WHOIS History","text":"<p>Platforms such as Silent Push retain WHOIS data, allowing analysts to query for historical registration information about domains and IP addresses. This can be useful when investigating long-term activity, during which time the threat actor is likely to have made various changes to their infrastructure.</p>"},{"location":"tools/#dns-data","title":"DNS data","text":""},{"location":"tools/#dns","title":"DNS","text":"<p>Tools such as DNSChecker allow querying for current DNS resolutions for domains and IP addresses.</p> <p>You can also use a CLI tool such as <code>dig</code> to perform DNS lookups (or use an online version such as this one).</p>"},{"location":"tools/#dns-history","title":"DNS History","text":"<p>Platforms such as Silent Push retain DNS resolution data, allowing analysts to query for historical resolutions. This can be useful when investigating long-term activity, during which time the threat actor is likely to have made various changes to their infrastructure.</p>"},{"location":"tools/#dns-permutations","title":"DNS Permutations","text":"<p>dnstwist is an open source tool that generates a comprehensive list of permutations based on a provided domain name and then checks if any of these permutations are currently in use. It allows discovery of domains with similar names.</p>"},{"location":"tools/#traffic-aggregation","title":"Traffic aggregation","text":""},{"location":"tools/#web-traffic","title":"Web traffic","text":"<p>Companies such as Team Cymru collect and aggregate netflow data from globally deployed sensors, allowing analysts to query their platform for any evidence of historical connections between IP addresses.</p> <p>Additionally, platforms such as SimilarWeb aggregate information about client connections to websites, allowing analysts to query for traffic statistics relating to any given site's current or historical popularity in certain regions, as well as common redirections between websites.</p> <p>Another source of traffic information about websites in particular is urlscan.io, which allows analysts to check what servers a given website connects to in order to download data (such as JavaScript code), and what other websites it may be forwarding users to (this can be a useful pivot for surfacing relationships between phishing landing pages, hijacked websites and infection servers).</p>"},{"location":"tools/#host-scanners","title":"Host scanners","text":"<p>Platforms such as Censys, Shodan Validin, and FOFA regularly scan IP addresses to determine what servers they're hosting, allowing analysts to query for current or historical information in their scan databases.</p>"},{"location":"tools/#honeypots","title":"Honeypots","text":"<p>Analysts can set up purposely vulnerable honeypots to lure opportunistic threat actors to infect them, thereby revealing their tools, client IP addresses, etc.</p> <p>Platforms such as GreyNoise operate global fleets of honeypots and allow analysts to query their database by client IP address, user agent, and more.</p>"},{"location":"tools/#url-scanners","title":"URL Scanners","text":"<p>Platforms such as urlscan.io allow analysts to perform scans of any website, and also query by URL for previously scanned sites.</p>"},{"location":"tools/#malware-zoos","title":"Malware zoos","text":""},{"location":"tools/#sample-repositories","title":"Sample repositories","text":"<p>Platforms such as MalwareBazaar allow analysts to publicly share samples with the community. Analysts can query by file hash and download any matching samples.</p>"},{"location":"tools/#sandboxes","title":"Sandboxes","text":"<p>Platforms such as any.run and HybridAnalysis allow analysts to upload samples for dynamic analysis, revealing their behavior, including process names they use, registry keys they create, DNS queries they perform, etc.</p>"},{"location":"tools/#code-similarity-scanners","title":"Code similarity scanners","text":"<p>Platforms such as Intezer Analyze and VirusTotal allow analysts to upload samples, scan them, and check for code similarity to other previously uploaded samples.</p>"},{"location":"tools/#automation","title":"Automation","text":""},{"location":"tools/#enrichment","title":"Enrichment","text":"<p>Enrichment tools such as Yeti often serve a dual purpose of knowledge management and automatic querying of metadata about artifacts.</p>"},{"location":"updates/","title":"Updates","text":""},{"location":"updates/2024/06/07/hello-world/","title":"Hello World","text":"<p>Welcome to Pivot Atlas, a cyber threat intel pivoting handbook developed by Amitai Cohen. Please check out the main page to learn more.</p> <p>This website is a work in progress, but it's reached the point where I feel ready to share it with others. I would very much appreciate any feedback on the implementation, structure and content. Feel free to DM me on Twitter if you'd like to chat about it, or simply create an issue in the GitHub project to submit ideas or special requests.</p> <p>Pivot Atlas is built using Martin Donath's wonderful Material for MKDocs, and its design is inspired by Nick Frichette's Hacking the Cloud project, MITRE's D3FEND matrix, Joe Slowik's body of work on the science of pivoting, and John Lambert's evergreen encouragement for defenders to think in graphs.</p> <p>UPDATE (2024-06-17): Special thanks to Noah McDonald, Rami McCarthy, Danielle Aminov and others for providing valuable early feedback to this project. Following their advice, I've made a few small structural changes, added more content, and also fixed several broken links.</p> <p>Current status:</p> <pre><code>- Artifact section lists most basic pivots.\n- Artifact section includes high-level descriptions of listed pivots.\n- Artifact section includes explanations and descriptions of malicious usecases.\n- Artifact section includes some real-world historic examples for certain pivots.\n- Artifact section includes some \"minimaps\" for pivots showing detailed analysis flow.\n- Artifact section includes some URL and API examples for certain pivots.\n- Fingerprints page includes high-level descriptions of each fingerprint type.\n- Map page includes full map of pivots mentioned elsewhere on the website.\n- Impact page describes how to operationalize information about newly uncovered malicious infrastructure.\n- Tips page provides guidelines on how to make the most of pivoting.\n- Tool page includes high-level descriptions of each tool type.\n- Tool page includes tool comparison table.\n</code></pre> <p>Future plans:</p> <pre><code>- Add more artifact types, including cloud-focused artifacts such as account IDs.\n- Add more pivot types, especially sample-focused pivots such as registry keys, file names, etc.\n- Incorporate threat actor behavior, habits, and patterns as artifacts and pivots (e.g., naming conventions).\n- Add case study pages with real-world summaries of investigations, including corresponding pivot maps.\n- Add call-outs to artifact pages with useful tips on how to make the most of each artifact.\n- Clarify which tool type enables each pivot, with links to the relevant tool page section.\n- Elaborate on fingerprint types (such as adding details about each JA4+ fingerprint).\n- Add screenshots of commonly used platforms in the tools and artifacts sections.\n- Add more real-world historic examples.\n- Add more URL and API examples.\n- Add more \"minimaps\".\n</code></pre>"}]}